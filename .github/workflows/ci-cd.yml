name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  frontend:
    needs: [test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build
        run: |
          REACT_APP_API_URL=https://discov-cursor-backend.fly.dev npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./frontend/build

  backend:
    needs: [test]
    runs-on: ubuntu-latest
    env:
      PGHOST: localhost
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: postgres
      PGPORT: 5432
      NODE_ENV: development
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Install Fly.io CLI
        run: |
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="$HOME/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          echo "$FLYCTL_INSTALL/bin" >> $GITHUB_PATH

      - name: Deploy to Fly.io
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: flyctl deploy --remote-only --no-cache
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }} 

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clean up Docker environment
        run: |
          docker compose down -v --remove-orphans || true
          docker system prune -af || true

      - name: Remove old frontend images to guarantee clean build
        run: |
          docker rmi discov-cursor-frontend || true
          docker rmi discov-cursor-frontend:latest || true
          docker rmi discov-cursor-frontend-e2e || true
      - name: Build and run all tests with Docker Compose
        run: |
          docker compose --profile test build --no-cache
          docker compose --profile test up -d db

          # 1. Backend unit/integration tests
          docker compose --profile test up backend-test

          # 2. Backend API contract tests
          docker compose --profile test up backend-api-test



          # Wait for backend-server-test to be ready for API tests
          echo '--- Waiting for backend-server-test to be ready ---'
          docker compose --profile test up -d backend-server-test
          
          ATTEMPTS=0
          MAX_ATTEMPTS=60
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            CID=$(docker compose --profile test ps -q backend-server-test)
            if [ -n "$CID" ]; then
              STATUS=$(docker inspect -f '{{.State.Status}}' $CID)
              HEALTH=$(docker inspect -f '{{.State.Health.Status}}' $CID)
              if [ "$STATUS" = "exited" ]; then
                echo 'Backend server test container exited early. Printing logs:'
                docker logs $CID
                exit 1
              fi
              if [ "$HEALTH" = "healthy" ]; then
                echo 'Backend server test is healthy!'; break;
              fi
            fi
            echo 'Still waiting for backend-server-test...';
            sleep 2;
            ATTEMPTS=$((ATTEMPTS+1))
          done
          if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
            echo 'Backend server test did not become healthy in time. Printing diagnostics:'
            docker compose --profile test ps -a
            docker compose --profile test logs backend-server-test
            exit 1
          fi



          # 3. Frontend unit/component tests
          docker compose --profile test up frontend-test

          # 4. Frontend E2E tests
          docker compose --profile test up frontend-e2e-test

      - name: Copy backend test results
        run: |
          mkdir -p test-results coverage/backend
          CONTAINER_ID=$(docker ps -a --filter "name=backend-test" --format "{{.ID}}" | head -n 1)
          docker cp $CONTAINER_ID:/app/test-results/01-backend-junit.xml test-results/01-backend-junit.xml || true
          docker cp $CONTAINER_ID:/app/coverage/. coverage/backend/ || true
        continue-on-error: true

      - name: Copy backend API test results
        run: |
          mkdir -p test-results
          CONTAINER_ID=$(docker ps -a --filter "name=backend-api-test" --format "{{.ID}}" | head -n 1)
          docker cp $CONTAINER_ID:/app/test-results/02-backend-api-junit.xml test-results/02-backend-api-junit.xml || true
        continue-on-error: true

      - name: Copy frontend test results
        run: |
          mkdir -p test-results coverage/frontend
          CONTAINER_ID=$(docker ps -a --filter "name=frontend-test" --format "{{.ID}}" | head -n 1)
          docker cp $CONTAINER_ID:/app/test-results/03-frontend-junit.xml test-results/03-frontend-junit.xml || true
          docker cp $CONTAINER_ID:/app/coverage/. coverage/frontend/ || true
        continue-on-error: true

      - name: Copy frontend E2E test results
        run: |
          mkdir -p test-results
          CONTAINER_ID=$(docker ps -a --filter "name=frontend-e2e-test" --format "{{.ID}}" | head -n 1)
          docker cp $CONTAINER_ID:/app/test-results/04-frontend-e2e-junit.xml test-results/04-frontend-e2e-junit.xml || true
        continue-on-error: true

      - name: List test-results and coverage directory
        run: |
          echo 'Contents of test-results:'
          ls -l test-results || true
          echo 'Contents of coverage:'
          ls -l coverage || true
          echo 'Contents of coverage/backend:'
          ls -l coverage/backend || true
          echo 'Contents of coverage/frontend:'
          ls -l coverage/frontend || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/*.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/**/*.json

      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Discov-Cursor Full Stack Test Report
          artifact: test-results
          path: '*.xml'
          reporter: jest-junit
          use-actions-summary: true
          badge-title: tests

      - name: Add Test & Coverage Summary Title
        if: always()
        run: |
          echo '# Discov-Cursor Test & Coverage Summary' >> $GITHUB_STEP_SUMMARY

      - name: Add backend coverage summary to Actions summary
        if: always()
        run: |
          echo '## 1. Backend Coverage' >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/backend/coverage-summary.json ]; then
            node scripts/coverage-to-md.js coverage/backend/coverage-summary.json >> $GITHUB_STEP_SUMMARY
          else
            echo 'No backend coverage summary found.' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Add frontend coverage summary to Actions summary
        if: always()
        run: |
          echo '## 2. Frontend Coverage' >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/frontend/coverage-summary.json ]; then
            node scripts/coverage-to-md.js coverage/frontend/coverage-summary.json >> $GITHUB_STEP_SUMMARY
          else
            echo 'No frontend coverage summary found.' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cleanup test containers
        run: |
          docker compose --profile test down -v || true