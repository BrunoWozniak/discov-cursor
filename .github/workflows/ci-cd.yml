name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  frontend:
    needs: [test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build
        run: |
          REACT_APP_API_URL=https://discov-cursor-backend.fly.dev npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./frontend/build

  backend:
    needs: [test]
    runs-on: ubuntu-latest
    env:
      PGHOST: localhost
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: postgres
      PGPORT: 5432
      NODE_ENV: development
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Install Fly.io CLI
        run: |
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="$HOME/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          echo "$FLYCTL_INSTALL/bin" >> $GITHUB_PATH

      - name: Run migrations
        run: npx knex migrate:latest

      - name: Deploy to Fly.io
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }} 

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clean up Docker environment
        run: |
          docker compose down -v --remove-orphans || true
          docker system prune -af || true

      - name: Remove old frontend images to guarantee clean build
        run: |
          docker rmi discov-cursor-frontend || true
          docker rmi discov-cursor-frontend:latest || true
          docker rmi discov-cursor-frontend-e2e || true
      - name: Build and run all tests with Docker Compose
        run: |
          docker compose build --no-cache
          docker compose up -d db

          # 1. Backend unit/integration tests
          docker compose up backend-test

          # 2. Backend API contract tests
          docker compose up backend-api-test

          set -x

          # --- IMMEDIATE DEBUG: Print backend logs right after container starts ---
          sleep 5
          echo '--- Backend logs immediately after startup ---'
          docker compose logs backend

          # --- DEBUG: Curl /todos endpoint from inside backend container ---
          echo '--- Curl /todos from inside backend container ---'
          docker compose run --rm backend curl -v http://localhost:4000/todos || true

          echo '--- ENTERING BACKEND HEALTHCHECK LOOP ---'
          ATTEMPTS=0
          MAX_ATTEMPTS=60
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            CID=$(docker compose ps -q backend)
            if [ -n "$CID" ]; then
              STATUS=$(docker inspect -f '{{.State.Status}}' $CID)
              HEALTH=$(docker inspect -f '{{.State.Health.Status}}' $CID)
              echo "[Healthcheck debug] Attempt $ATTEMPTS: Status=$STATUS, Health=$HEALTH"
              if [ "$STATUS" = "exited" ]; then
                echo 'Backend container exited early. Printing logs:'
                docker logs $CID
                echo '--- Backend /app directory listing ---'
                docker compose run --rm backend ls -l /app || true
                echo '--- Node version in backend container ---'
                docker compose run --rm backend node -v || true
                exit 1
              fi
              if [ "$HEALTH" = "healthy" ]; then
                echo 'Backend is healthy!'; break;
              fi
            fi
            echo 'Still waiting for backend...';
            sleep 2;
            ATTEMPTS=$((ATTEMPTS+1))
          done
          if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
            echo 'Backend did not become healthy in time. Printing diagnostics:'
            docker compose ps -a
            docker compose logs backend
            CID=$(docker compose ps -q backend)
            if [ -n "$CID" ]; then
              docker inspect $CID
              echo '--- Backend container logs (docker logs) ---'
              docker logs $CID
              echo '--- Backend /app directory listing ---'
              docker compose run --rm backend ls -l /app || true
              echo '--- Node version in backend container ---'
              docker compose run --rm backend node -v || true
            fi
            exit 1
          fi

          # --- EXTRA DEBUGGING: Print backend logs after container exits (even if healthy) ---
          CID=$(docker compose ps -q backend)
          if [ -n "$CID" ]; then
            echo '--- Backend container logs (docker logs) ---'
            docker logs $CID
            echo '--- Backend /app directory listing ---'
            docker compose exec backend ls -l /app || true
            echo '--- Node version in backend container ---'
            docker compose exec backend node -v || true
          fi

          # 3. Frontend unit/component tests
          docker compose up frontend-test

          # 4. Frontend up + E2E tests
          docker compose up frontend-e2e-test

      - name: Copy backend test results
        run: |
          mkdir -p test-results/backend coverage/backend
          docker cp $(docker compose ps -q backend-test):/app/test-results/. test-results/backend/
          docker cp $(docker compose ps -q backend-test):/app/coverage/. coverage/backend/
        continue-on-error: true

      - name: Copy backend API test results
        run: |
          mkdir -p test-results/backend-api
          docker cp $(docker compose ps -q backend-api-test):/app/test-results/. test-results/backend-api/
        continue-on-error: true

      - name: Copy frontend test results
        run: |
          mkdir -p test-results/frontend coverage/frontend
          docker cp $(docker compose ps -q frontend-test):/app/test-results/. test-results/frontend/
          docker cp $(docker compose ps -q frontend-test):/app/coverage/. coverage/frontend/
        continue-on-error: true

      - name: Copy frontend E2E test results
        run: |
          mkdir -p test-results/frontend-e2e
          docker cp $(docker compose ps -q frontend-e2e-test):/app/test-results/. test-results/frontend-e2e/
        continue-on-error: true

      - name: Cleanup test containers
        run: |
          docker compose down -v || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: All Tests
          path: test-results/**/*.xml
          reporter: jest-junit 