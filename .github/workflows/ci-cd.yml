name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  frontend:
    needs: [test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build
        run: |
          REACT_APP_API_URL=https://discov-cursor-backend.fly.dev npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./frontend/build

  backend:
    needs: [test]
    runs-on: ubuntu-latest
    env:
      PGHOST: localhost
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: postgres
      PGPORT: 5432
      NODE_ENV: development
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Install Fly.io CLI
        run: |
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="$HOME/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          echo "$FLYCTL_INSTALL/bin" >> $GITHUB_PATH

      - name: Run migrations
        run: npx knex migrate:latest

      - name: Deploy to Fly.io
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }} 

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and run all tests with Docker Compose
        run: |
          docker compose build
          docker compose up -d db
          docker compose run --rm backend-test
          docker compose run --rm frontend-test
          docker compose up -d backend frontend
          echo 'Waiting for frontend container to be healthy...'
          ATTEMPTS=0
          MAX_ATTEMPTS=60
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            CID=$(docker compose ps -q frontend)
            if [ -n "$CID" ] && [ "$(docker inspect -f '{{.State.Health.Status}}' $CID)" = "healthy" ]; then
              echo 'Frontend is healthy!'; break;
            fi
            echo 'Still waiting for frontend...';
            sleep 2;
            ATTEMPTS=$((ATTEMPTS+1))
          done
          if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
            echo 'Frontend did not become healthy in time. Printing diagnostics:'
            docker compose ps -a
            docker compose logs frontend
            CID=$(docker compose ps -q frontend)
            if [ -n "$CID" ]; then
              docker inspect $CID
            fi
            exit 1
          fi
          docker compose run --rm frontend-e2e-test
          docker compose run --rm backend-api-test

      - name: Copy backend test results
        run: |
          mkdir -p test-results/backend coverage/backend
          docker cp $(docker compose ps -q backend-test):/app/test-results/. test-results/backend/
          docker cp $(docker compose ps -q backend-test):/app/coverage/. coverage/backend/
        continue-on-error: true

      - name: Copy frontend test results
        run: |
          mkdir -p test-results/frontend coverage/frontend
          docker cp $(docker compose ps -q frontend-test):/app/test-results/. test-results/frontend/
          docker cp $(docker compose ps -q frontend-test):/app/coverage/. coverage/frontend/
        continue-on-error: true

      - name: Copy frontend E2E test results
        run: |
          mkdir -p test-results/frontend-e2e
          docker cp $(docker compose ps -q frontend-e2e-test):/app/test-results/. test-results/frontend-e2e/
        continue-on-error: true

      - name: Copy backend API test results
        run: |
          mkdir -p test-results/backend-api
          docker cp $(docker compose ps -q backend-api-test):/app/test-results/. test-results/backend-api/
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: All Tests
          path: test-results/**/*.xml
          reporter: jest-junit 